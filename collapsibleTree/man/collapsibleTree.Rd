% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/collapsibleTree.R,
%   R/collapsibleTree.data.frame.R, R/collapsibleTree.data.tree.R, R/linnaeus.R
\name{collapsibleTree}
\alias{collapsibleTree}
\alias{collapsibleTree.data.frame}
\alias{collapsibleTree.Node}
\alias{get_pieNode}
\alias{pieProportions}
\alias{do_color_map}
\alias{SortNumeric}
\alias{renameNode}
\alias{do_summary}
\alias{linnaeus.sets}
\alias{do_toy_example}
\title{Create Interactive Collapsible Tree Diagrams}
\source{
Christopher Gandrud: \url{http://christophergandrud.github.io/networkD3/}.

d3noob: \url{https://bl.ocks.org/d3noob/43a860bc0024792f8803bba8ca0d5ecd}.
}
\usage{
collapsibleTree(df, ..., inputId = NULL, attribute = "leafCount",
  aggFun = sum, fill = "lightsteelblue", linkLength = NULL,
  fontSize = 10, tooltip = FALSE, tooltipHtml = NULL, nodeSize = NULL,
  collapsed = TRUE, zoomable = TRUE, width = NULL, height = NULL)

\method{collapsibleTree}{data.frame}(df, hierarchy,
  root = deparse(substitute(df)), inputId = NULL, attribute = "leafCount",
  aggFun = sum, fill = "lightsteelblue", fillByLevel = TRUE,
  linkLength = NULL, fontSize = 10, tooltip = FALSE, nodeSize = NULL,
  collapsed = TRUE, zoomable = TRUE, width = NULL, height = NULL, ...)

\method{collapsibleTree}{Node}(df, hierarchy_attribute = "level",
  root = df$name, inputId = NULL, attribute = "leafCount", aggFun = sum,
  fill = "lightsteelblue", linkLength = NULL, fontSize = 10,
  tooltip = FALSE, tooltipHtml = NULL, nodeSize = NULL,
  collapsed = TRUE, zoomable = TRUE, width = NULL, height = NULL,
  nodeSize_sc = 2, nodeLabel_sc = FALSE, ct_colors = NULL,
  ctypes = NULL, sort_by_ctype = TRUE, nodeSize_class = c(10, 15, 20, 35),
  nodeSize_breaks = c(0, 5, 20, 500, 1e+06), angle = 0,
  hide_scars = FALSE, pieSummary = TRUE, pieNode = FALSE,
  use_scar_as_name = TRUE, do_collapse = TRUE, ...)

get_pieNode(df, ctypes, nodeSize_class = c(10, 15, 20, 35),
  nodeSize_breaks = c(0, 5, 20, 100, 1e+06), nodeSize_sc = 2,
  jsonFields = NULL)

pieProportions(node)

do_color_map(name, ct_colors, ctypes, width = 2.5, height = 10)

SortNumeric(node, attribute, ..., decreasing = FALSE, recursive = TRUE)

renameNode(node)

do_summary(x)

linnaeus.sets(setname = "adult")

do_toy_example(type1 = "type1", type2 = "type2", scar_color = "#aaaaaa",
  type1_color = "#ff0000", type2_color = "#0000ff", scarSize = 6,
  scSize = 2.5, width = 500, height = 500, return_widget = FALSE)
}
\arguments{
\item{df}{a \code{data.frame} from which to construct a nested list
(where every row is a leaf) or a preconstructed \code{data.tree}}

\item{...}{other arguments to pass onto S3 methods that implement
this generic function - \code{collapsibleTree.data.frame}, \code{collapsibleTree.Node}}

\item{inputId}{the input slot that will be used to access the selected node (for Shiny).
Will return a named list of the most recently clicked node,
along with all of its parents.}

\item{attribute}{numeric column not listed in hierarchy that will be used
for tooltips, if applicable. Defaults to 'leafCount',
which is the cumulative count of a node's children}

\item{aggFun}{aggregation function applied to the attribute column to determine
values of parent nodes. Defaults to \code{sum}, but \code{mean} also makes sense.}

\item{fill}{either a single color or a mapping of colors:
\itemize{
 \item For \code{data.frame} input, a vector of colors the same length as the number
 of nodes. By default, vector should be ordered by level, such that the root color is
 described first, then all the children's colors, and then all the grandchildren's colors
 \item For \code{data.tree} input, a tree attribute containing the color for each node
}}

\item{linkLength}{length of the horizontal links that connect nodes in pixels.
(optional, defaults to automatic sizing)
Applicable only for \code{data.frame} input.}

\item{fontSize}{font size of the label text in pixels}

\item{tooltip}{tooltip shows the node's label and attribute value.}

\item{tooltipHtml}{column name (possibly containing html) to override default tooltip
contents, allowing for more advanced customization. Applicable only for \code{data.tree} input.}

\item{nodeSize}{numeric column that will be used to determine relative node size.
Default is to have a constant node size throughout. 'leafCount' can also
be used here (cumulative count of a node's children), or 'count'
(count of node's immediate children).}

\item{collapsed}{the tree's children will start collapsed by default}

\item{zoomable}{pan and zoom by dragging and scrolling}

\item{width}{width in pixels (optional, defaults to automatic sizing)}

\item{height}{height in pixels (optional, defaults to automatic sizing)}

\item{hierarchy}{a character vector of column names that define the order
and hierarchy of the tree network. Applicable only for \code{data.frame} input.}

\item{root}{label for the root node}

\item{fillByLevel}{which order to assign fill values to nodes.
\code{TRUE}: Filling by level; will assign fill values to nodes vertically.
\code{FALSE}: Filling by order; will assign fill values to nodes horizontally.}

\item{hierarchy_attribute}{name of the \code{data.tree} attribute that contains
hierarchy information of the tree network. Applicable only for \code{data.tree} input.}

\item{nodeSize_sc}{node size for single cells (currently overriden by JS)}

\item{ctypes}{cell types}

\item{nodeSize_breaks}{pie node size breaks}

\item{jsonFields}{what to JSON}

\item{df}{data.tree object to compute cell type counts. Requires Cell.type field}
}
\description{
Interactive Reingold-Tilford tree diagram created using D3.js,
where every node can be expanded and collapsed by clicking on it.

Helper function for pieNode modality of a Linnaeus data.tree object

Helper function to sort children by attribute, casting the given value to numeric

Node Summary

Helper function for pieNode modality of a Linnaeus data.tree object
}
\examples{
collapsibleTree(warpbreaks, c("wool", "tension", "breaks"))

# Data from US Forest Service DataMart
species <- read.csv(system.file("extdata/species.csv", package = "collapsibleTree"))
collapsibleTree(df = species, c("REGION", "CLASS", "NAME"), fill = "green")

# Visualizing the order in which the node colors are filled
library(RColorBrewer)
collapsibleTree(
  warpbreaks, c("wool", "tension"),
  fill = brewer.pal(9, "RdBu"),
  fillByLevel = TRUE
)
collapsibleTree(
  warpbreaks, c("wool", "tension"),
  fill = brewer.pal(9, "RdBu"),
  fillByLevel = FALSE
)

# Tooltip can be mapped to an attribute, or default to leafCount
collapsibleTree(
  warpbreaks, c("wool", "tension", "breaks"),
  tooltip = TRUE,
  attribute = "breaks"
)

# Node size can be mapped to any numeric column, or to leafCount
collapsibleTree(
  warpbreaks, c("wool", "tension", "breaks"),
  nodeSize = "breaks"
)

# collapsibleTree.Node example
data(acme, package="data.tree")
acme$Do(function(node) node$cost <- data.tree::Aggregate(node, attribute = "cost", aggFun = sum))
collapsibleTree(acme, nodeSize  = "cost", attribute = "cost", tooltip = TRUE)

# Emulating collapsibleTree.data.frame using collapsibleTree.Node
species <- read.csv(system.file("extdata/species.csv", package = "collapsibleTree"))
hierarchy <- c("REGION", "CLASS", "NAME")
species$pathString <- paste(
  "species",
  apply(species[,hierarchy], 1, paste, collapse = "//"),
  sep = "//"
)
df <- data.tree::as.Node(species, pathDelimiter = "//")
collapsibleTree(df)

}
